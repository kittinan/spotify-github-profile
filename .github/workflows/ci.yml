name: Python Flask CI/CD

on:
  pull_request:
    branches:
      - master   # รันเวลาเปิด PR เข้ามาที่ master (default branch)
      - main     # รองรับทั้ง main และ master
  push:
    branches:
      - master   # รันตอน merge เข้า master เพื่อ deploy
      - main     # รองรับทั้ง main และ master
      - feature/add-unittest  # รันสำหรับ feature branch นี้

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']  # ทดสอบหลาย Python versions

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt

      - name: Create test environment file
        run: |
          touch .env
          echo "SPOTIFY_CLIENT_ID=test_client_id" >> .env
          echo "SPOTIFY_CLIENT_SECRET=test_client_secret" >> .env
          echo "REDIRECT_URI=http://localhost:5000/callback" >> .env

      - name: Run linting (optional)
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          pytest tests/ --maxfail=5 --disable-warnings -v --cov=api --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

      - name: Test summary
        run: |
          echo "✅ All tests passed successfully!"
          echo "📊 Coverage report generated"
          echo "🎉 Ready for deployment"

  # Job สำหรับตรวจสอบ security vulnerabilities
  security-check:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install safety bandit

      - name: Run safety check for vulnerabilities
        run: |
          safety check
        continue-on-error: true

      - name: Run bandit security linter
        run: |
          bandit -r api/ -f json -o bandit-report.json
        continue-on-error: true

  # Job สำหรับตรวจสอบ code quality
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install black isort mypy

      - name: Check code formatting with black
        run: |
          black --check --diff api/ tests/
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff api/ tests/
        continue-on-error: true

      - name: Type checking with mypy
        run: |
          mypy api/ --ignore-missing-imports
        continue-on-error: true

  # Job แสดงสรุปผลการ build
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check, code-quality]
    if: always()

    steps:
      - name: Build Summary
        run: |
          echo "🔍 CI/CD Pipeline Summary:"
          echo "✅ Tests: ${{ needs.build-and-test.result }}"
          echo "🔒 Security: ${{ needs.security-check.result }}"
          echo "📝 Code Quality: ${{ needs.code-quality.result }}"
          
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "🎉 Build completed successfully!"
            echo "Ready for merge/deployment 🚀"
          else
            echo "❌ Build failed. Please check the logs."
            exit 1
          fi
